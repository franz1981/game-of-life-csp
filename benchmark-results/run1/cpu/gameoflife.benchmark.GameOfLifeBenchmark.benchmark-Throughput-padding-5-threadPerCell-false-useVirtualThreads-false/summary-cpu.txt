--- Execution profile ---
Total samples       : 54346
unknown_Java        : 326 (0.60%)
not_walkable_Java   : 1 (0.00%)

--- 9632563298 ns (1.77%), 948 samples
  [ 0] GameOfLife.lambda$calculateFrame$5
  [ 1] GameOfLife$$Lambda$52.0x0000000801084e78.accept
  [ 2] Dimensions.forEachRowCol
  [ 3] GameOfLife.calculateFrame
  [ 4] GameOfLife.lambda$calculateFrameBlocking$7
  [ 5] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [ 6] ThreadPoolExecutor.runWorker
  [ 7] ThreadPoolExecutor$Worker.run
  [ 8] Thread.run
  [ 9] [Thread-9 tid=369571]

--- 5926091259 ns (1.09%), 592 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$53.0x0000000801085098.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-5 tid=369567]

--- 5796300293 ns (1.06%), 579 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$57.0x0000000801085910.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-4 tid=369566]

--- 5706241500 ns (1.05%), 570 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$53.0x0000000801085098.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-4 tid=369566]

--- 5575735046 ns (1.02%), 557 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$53.0x0000000801085098.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-3 tid=369565]

--- 5455608235 ns (1.00%), 545 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$53.0x0000000801085098.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-6 tid=369568]

--- 5386037170 ns (0.99%), 538 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$53.0x0000000801085098.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-7 tid=369569]

--- 5295288850 ns (0.97%), 529 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$57.0x0000000801085910.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-6 tid=369568]

--- 5005105102 ns (0.92%), 500 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$57.0x0000000801085910.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-5 tid=369567]

--- 4834812077 ns (0.89%), 483 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$57.0x0000000801085910.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-3 tid=369565]

--- 4825204876 ns (0.89%), 482 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$57.0x0000000801085910.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-7 tid=369569]

--- 4764806454 ns (0.87%), 476 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-3 tid=369565]

--- 4654968143 ns (0.85%), 465 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-4 tid=369566]

--- 4564692654 ns (0.84%), 456 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-5 tid=369567]

--- 4481944942 ns (0.82%), 441 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] GameOfLife.lambda$calculateFrame$6
  [ 3] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [ 4] Dimensions.forEachRowCol
  [ 5] GameOfLife.calculateFrame
  [ 6] GameOfLife.lambda$calculateFrameBlocking$7
  [ 7] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-9 tid=369571]

--- 4447566694 ns (0.82%), 444 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$53.0x0000000801085098.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-8 tid=369570]

--- 4404450644 ns (0.81%), 440 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-6 tid=369568]

--- 4380642284 ns (0.80%), 431 samples
  [ 0] LinkedBlockingQueue.dequeue
  [ 1] LinkedBlockingQueue.take
  [ 2] Channel.take
  [ 3] GameOfLife.lambda$calculateFrame$6
  [ 4] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [ 5] Dimensions.forEachRowCol
  [ 6] GameOfLife.calculateFrame
  [ 7] GameOfLife.lambda$calculateFrameBlocking$7
  [ 8] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [ 9] ThreadPoolExecutor.runWorker
  [10] ThreadPoolExecutor$Worker.run
  [11] Thread.run
  [12] [Thread-9 tid=369571]

--- 4354636145 ns (0.80%), 435 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-2 tid=369564]

--- 4287739222 ns (0.79%), 422 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] GameOfLife.lambda$calculateFrame$5
  [ 7] GameOfLife$$Lambda$52.0x0000000801084e78.accept
  [ 8] Dimensions.forEachRowCol
  [ 9] GameOfLife.calculateFrame
  [10] GameOfLife.lambda$calculateFrameBlocking$7
  [11] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-9 tid=369571]

--- 4214531884 ns (0.77%), 421 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$57.0x0000000801085910.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-2 tid=369564]

--- 4023916711 ns (0.74%), 396 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] GameOfLife.lambda$calculateFrame$6
  [ 7] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [ 8] Dimensions.forEachRowCol
  [ 9] GameOfLife.calculateFrame
  [10] GameOfLife.lambda$calculateFrameBlocking$7
  [11] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-9 tid=369571]

--- 3964332167 ns (0.73%), 396 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$53.0x0000000801085098.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-2 tid=369564]

--- 3953851752 ns (0.73%), 395 samples
  [ 0] LinkedBlockingQueue.dequeue
  [ 1] LinkedBlockingQueue.take
  [ 2] Channel.take
  [ 3] Cell$$Lambda$57.0x0000000801085910.apply
  [ 4] ReferencePipeline$3$1.accept
  [ 5] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 6] AbstractPipeline.copyInto
  [ 7] AbstractPipeline.wrapAndCopyInto
  [ 8] ReduceOps$ReduceOp.evaluateSequential
  [ 9] AbstractPipeline.evaluate
  [10] IntPipeline.reduce
  [11] IntPipeline.sum
  [12] Cell.calculateNextState
  [13] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [14] Iterable.forEach
  [15] CellsGroup.run
  [16] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [17] ThreadPoolExecutor.runWorker
  [18] ThreadPoolExecutor$Worker.run
  [19] Thread.run
  [20] [Thread-6 tid=369568]

--- 3946460282 ns (0.72%), 394 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-8 tid=369570]

--- 3863895335 ns (0.71%), 386 samples
  [ 0] LinkedBlockingQueue.dequeue
  [ 1] LinkedBlockingQueue.take
  [ 2] Channel.take
  [ 3] Cell$$Lambda$57.0x0000000801085910.apply
  [ 4] ReferencePipeline$3$1.accept
  [ 5] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 6] AbstractPipeline.copyInto
  [ 7] AbstractPipeline.wrapAndCopyInto
  [ 8] ReduceOps$ReduceOp.evaluateSequential
  [ 9] AbstractPipeline.evaluate
  [10] IntPipeline.reduce
  [11] IntPipeline.sum
  [12] Cell.calculateNextState
  [13] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [14] Iterable.forEach
  [15] CellsGroup.run
  [16] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [17] ThreadPoolExecutor.runWorker
  [18] ThreadPoolExecutor$Worker.run
  [19] Thread.run
  [20] [Thread-3 tid=369565]

--- 3803811503 ns (0.70%), 380 samples
  [ 0] LinkedBlockingQueue.dequeue
  [ 1] LinkedBlockingQueue.take
  [ 2] Channel.take
  [ 3] Cell$$Lambda$57.0x0000000801085910.apply
  [ 4] ReferencePipeline$3$1.accept
  [ 5] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 6] AbstractPipeline.copyInto
  [ 7] AbstractPipeline.wrapAndCopyInto
  [ 8] ReduceOps$ReduceOp.evaluateSequential
  [ 9] AbstractPipeline.evaluate
  [10] IntPipeline.reduce
  [11] IntPipeline.sum
  [12] Cell.calculateNextState
  [13] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [14] Iterable.forEach
  [15] CellsGroup.run
  [16] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [17] ThreadPoolExecutor.runWorker
  [18] ThreadPoolExecutor$Worker.run
  [19] Thread.run
  [20] [Thread-5 tid=369567]

--- 3746202929 ns (0.69%), 374 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] Cell$$Lambda$57.0x0000000801085910.apply
  [ 7] ReferencePipeline$3$1.accept
  [ 8] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 9] AbstractPipeline.copyInto
  [10] AbstractPipeline.wrapAndCopyInto
  [11] ReduceOps$ReduceOp.evaluateSequential
  [12] AbstractPipeline.evaluate
  [13] IntPipeline.reduce
  [14] IntPipeline.sum
  [15] Cell.calculateNextState
  [16] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [17] Iterable.forEach
  [18] CellsGroup.run
  [19] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [20] ThreadPoolExecutor.runWorker
  [21] ThreadPoolExecutor$Worker.run
  [22] Thread.run
  [23] [Thread-8 tid=369570]

--- 3684117924 ns (0.68%), 368 samples
  [ 0] ReduceOps$5ReducingSink.get
  [ 1] ReduceOps$5ReducingSink.get
  [ 2] ReduceOps$ReduceOp.evaluateSequential
  [ 3] AbstractPipeline.evaluate
  [ 4] IntPipeline.reduce
  [ 5] IntPipeline.sum
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-7 tid=369569]

--- 3663963173 ns (0.67%), 366 samples
  [ 0] LinkedBlockingQueue.dequeue
  [ 1] LinkedBlockingQueue.take
  [ 2] Channel.take
  [ 3] Cell$$Lambda$57.0x0000000801085910.apply
  [ 4] ReferencePipeline$3$1.accept
  [ 5] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 6] AbstractPipeline.copyInto
  [ 7] AbstractPipeline.wrapAndCopyInto
  [ 8] ReduceOps$ReduceOp.evaluateSequential
  [ 9] AbstractPipeline.evaluate
  [10] IntPipeline.reduce
  [11] IntPipeline.sum
  [12] Cell.calculateNextState
  [13] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [14] Iterable.forEach
  [15] CellsGroup.run
  [16] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [17] ThreadPoolExecutor.runWorker
  [18] ThreadPoolExecutor$Worker.run
  [19] Thread.run
  [20] [Thread-4 tid=369566]

--- 3293393621 ns (0.60%), 329 samples
  [ 0] LinkedBlockingQueue.put
  [ 1] Channel.put
  [ 2] Cell.lambda$notifyLiveness$0
  [ 3] Cell$$Lambda$53.0x0000000801085098.accept
  [ 4] ArrayList.forEach
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-6 tid=369568]

--- 3283583672 ns (0.60%), 328 samples
  [ 0] LinkedBlockingQueue.dequeue
  [ 1] LinkedBlockingQueue.take
  [ 2] Channel.take
  [ 3] Cell$$Lambda$57.0x0000000801085910.apply
  [ 4] ReferencePipeline$3$1.accept
  [ 5] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 6] AbstractPipeline.copyInto
  [ 7] AbstractPipeline.wrapAndCopyInto
  [ 8] ReduceOps$ReduceOp.evaluateSequential
  [ 9] AbstractPipeline.evaluate
  [10] IntPipeline.reduce
  [11] IntPipeline.sum
  [12] Cell.calculateNextState
  [13] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [14] Iterable.forEach
  [15] CellsGroup.run
  [16] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [17] ThreadPoolExecutor.runWorker
  [18] ThreadPoolExecutor$Worker.run
  [19] Thread.run
  [20] [Thread-7 tid=369569]

--- 3213270337 ns (0.59%), 321 samples
  [ 0] LinkedBlockingQueue.enqueue
  [ 1] LinkedBlockingQueue.put
  [ 2] Channel.put
  [ 3] Cell.lambda$notifyLiveness$0
  [ 4] Cell$$Lambda$53.0x0000000801085098.accept
  [ 5] ArrayList.forEach
  [ 6] Cell.notifyLiveness
  [ 7] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-6 tid=369568]

--- 3183450053 ns (0.58%), 318 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$57.0x0000000801085910.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-4 tid=369566]

--- 3173285232 ns (0.58%), 317 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$57.0x0000000801085910.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-3 tid=369565]

--- 3123287893 ns (0.57%), 312 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$53.0x0000000801085098.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-5 tid=369567]

--- 3113463319 ns (0.57%), 311 samples
  [ 0] LinkedBlockingQueue.enqueue
  [ 1] LinkedBlockingQueue.put
  [ 2] Channel.put
  [ 3] Cell.lambda$notifyLiveness$0
  [ 4] Cell$$Lambda$53.0x0000000801085098.accept
  [ 5] ArrayList.forEach
  [ 6] Cell.notifyLiveness
  [ 7] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-7 tid=369569]

--- 3103409892 ns (0.57%), 310 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LinkedBlockingQueue.signalNotEmpty
  [ 5] LinkedBlockingQueue.put
  [ 6] Channel.put
  [ 7] Cell.lambda$notifyLiveness$0
  [ 8] Cell$$Lambda$53.0x0000000801085098.accept
  [ 9] ArrayList.forEach
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-7 tid=369569]

--- 3083102502 ns (0.57%), 308 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$57.0x0000000801085910.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-5 tid=369567]

--- 3053081987 ns (0.56%), 305 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801085910.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-3 tid=369565]

--- 3023268424 ns (0.55%), 302 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$57.0x0000000801085910.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-7 tid=369569]

--- 3013033549 ns (0.55%), 301 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$57.0x0000000801085910.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-6 tid=369568]

--- 2923151580 ns (0.54%), 292 samples
  [ 0] LinkedBlockingQueue.dequeue
  [ 1] LinkedBlockingQueue.take
  [ 2] Channel.take
  [ 3] Cell$$Lambda$57.0x0000000801085910.apply
  [ 4] ReferencePipeline$3$1.accept
  [ 5] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 6] AbstractPipeline.copyInto
  [ 7] AbstractPipeline.wrapAndCopyInto
  [ 8] ReduceOps$ReduceOp.evaluateSequential
  [ 9] AbstractPipeline.evaluate
  [10] IntPipeline.reduce
  [11] IntPipeline.sum
  [12] Cell.calculateNextState
  [13] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [14] Iterable.forEach
  [15] CellsGroup.run
  [16] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [17] ThreadPoolExecutor.runWorker
  [18] ThreadPoolExecutor$Worker.run
  [19] Thread.run
  [20] [Thread-2 tid=369564]

--- 2892919316 ns (0.53%), 289 samples
  [ 0] LinkedBlockingQueue.enqueue
  [ 1] LinkedBlockingQueue.put
  [ 2] Channel.put
  [ 3] Cell.lambda$notifyLiveness$0
  [ 4] Cell$$Lambda$53.0x0000000801085098.accept
  [ 5] ArrayList.forEach
  [ 6] Cell.notifyLiveness
  [ 7] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-5 tid=369567]

--- 2883130184 ns (0.53%), 288 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$53.0x0000000801085098.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-4 tid=369566]

--- 2882904954 ns (0.53%), 288 samples
  [ 0] LinkedBlockingQueue.enqueue
  [ 1] LinkedBlockingQueue.put
  [ 2] Channel.put
  [ 3] Cell.lambda$notifyLiveness$0
  [ 4] Cell$$Lambda$53.0x0000000801085098.accept
  [ 5] ArrayList.forEach
  [ 6] Cell.notifyLiveness
  [ 7] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-3 tid=369565]

--- 2864709432 ns (0.53%), 286 samples
  [ 0] LinkedBlockingQueue.dequeue
  [ 1] LinkedBlockingQueue.take
  [ 2] Channel.take
  [ 3] Cell$$Lambda$57.0x0000000801085910.apply
  [ 4] ReferencePipeline$3$1.accept
  [ 5] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 6] AbstractPipeline.copyInto
  [ 7] AbstractPipeline.wrapAndCopyInto
  [ 8] ReduceOps$ReduceOp.evaluateSequential
  [ 9] AbstractPipeline.evaluate
  [10] IntPipeline.reduce
  [11] IntPipeline.sum
  [12] Cell.calculateNextState
  [13] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [14] Iterable.forEach
  [15] CellsGroup.run
  [16] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [17] ThreadPoolExecutor.runWorker
  [18] ThreadPoolExecutor$Worker.run
  [19] Thread.run
  [20] [Thread-8 tid=369570]

--- 2842992473 ns (0.52%), 284 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LinkedBlockingQueue.signalNotEmpty
  [ 5] LinkedBlockingQueue.put
  [ 6] Channel.put
  [ 7] Cell.lambda$notifyLiveness$0
  [ 8] Cell$$Lambda$53.0x0000000801085098.accept
  [ 9] ArrayList.forEach
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-5 tid=369567]

--- 2842878290 ns (0.52%), 284 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$53.0x0000000801085098.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-3 tid=369565]

--- 2832920823 ns (0.52%), 283 samples
  [ 0] LinkedBlockingQueue.put
  [ 1] Channel.put
  [ 2] Cell.lambda$notifyLiveness$0
  [ 3] Cell$$Lambda$53.0x0000000801085098.accept
  [ 4] ArrayList.forEach
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-5 tid=369567]

--- 2812973732 ns (0.52%), 281 samples
  [ 0] LinkedBlockingQueue.enqueue
  [ 1] LinkedBlockingQueue.put
  [ 2] Channel.put
  [ 3] Cell.lambda$notifyLiveness$0
  [ 4] Cell$$Lambda$53.0x0000000801085098.accept
  [ 5] ArrayList.forEach
  [ 6] Cell.notifyLiveness
  [ 7] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-4 tid=369566]

--- 2812951407 ns (0.52%), 281 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.signalNotEmpty
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] Cell.lambda$notifyLiveness$0
  [ 6] Cell$$Lambda$53.0x0000000801085098.accept
  [ 7] ArrayList.forEach
  [ 8] Cell.notifyLiveness
  [ 9] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-5 tid=369567]

--- 2803107399 ns (0.51%), 280 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$53.0x0000000801085098.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-7 tid=369569]

--- 2803038407 ns (0.51%), 280 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LinkedBlockingQueue.signalNotEmpty
  [ 5] LinkedBlockingQueue.put
  [ 6] Channel.put
  [ 7] Cell.lambda$notifyLiveness$0
  [ 8] Cell$$Lambda$53.0x0000000801085098.accept
  [ 9] ArrayList.forEach
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-4 tid=369566]

--- 2742906957 ns (0.50%), 274 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$57.0x0000000801085910.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-2 tid=369564]

--- 2733102626 ns (0.50%), 273 samples
  [ 0] LinkedBlockingQueue.put
  [ 1] Channel.put
  [ 2] Cell.lambda$notifyLiveness$0
  [ 3] Cell$$Lambda$53.0x0000000801085098.accept
  [ 4] ArrayList.forEach
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-7 tid=369569]

--- 2732960967 ns (0.50%), 273 samples
  [ 0] LinkedBlockingQueue.put
  [ 1] Channel.put
  [ 2] Cell.lambda$notifyLiveness$0
  [ 3] Cell$$Lambda$53.0x0000000801085098.accept
  [ 4] ArrayList.forEach
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-4 tid=369566]

--- 2712865243 ns (0.50%), 271 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801085910.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-4 tid=369566]

--- 2683597110 ns (0.49%), 264 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.take
  [ 3] Channel.take
  [ 4] GameOfLife.lambda$calculateFrame$6
  [ 5] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [ 6] Dimensions.forEachRowCol
  [ 7] GameOfLife.calculateFrame
  [ 8] GameOfLife.lambda$calculateFrameBlocking$7
  [ 9] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-9 tid=369571]

--- 2683014757 ns (0.49%), 268 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.signalNotEmpty
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] Cell.lambda$notifyLiveness$0
  [ 6] Cell$$Lambda$53.0x0000000801085098.accept
  [ 7] ArrayList.forEach
  [ 8] Cell.notifyLiveness
  [ 9] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-7 tid=369569]

--- 2662470961 ns (0.49%), 262 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.signalNotEmpty
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] GameOfLife.lambda$calculateFrame$5
  [ 6] GameOfLife$$Lambda$52.0x0000000801084e78.accept
  [ 7] Dimensions.forEachRowCol
  [ 8] GameOfLife.calculateFrame
  [ 9] GameOfLife.lambda$calculateFrameBlocking$7
  [10] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-9 tid=369571]

--- 2632684456 ns (0.48%), 263 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LinkedBlockingQueue.signalNotEmpty
  [ 5] LinkedBlockingQueue.put
  [ 6] Channel.put
  [ 7] Cell.lambda$notifyLiveness$0
  [ 8] Cell$$Lambda$53.0x0000000801085098.accept
  [ 9] ArrayList.forEach
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-3 tid=369565]

--- 2632611795 ns (0.48%), 263 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801085910.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-6 tid=369568]

--- 2622695573 ns (0.48%), 262 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LinkedBlockingQueue.signalNotEmpty
  [ 5] LinkedBlockingQueue.put
  [ 6] Channel.put
  [ 7] Cell.lambda$notifyLiveness$0
  [ 8] Cell$$Lambda$53.0x0000000801085098.accept
  [ 9] ArrayList.forEach
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-6 tid=369568]

--- 2612822874 ns (0.48%), 261 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801085910.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-2 tid=369564]

--- 2612662520 ns (0.48%), 261 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.signalNotEmpty
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] Cell.lambda$notifyLiveness$0
  [ 6] Cell$$Lambda$53.0x0000000801085098.accept
  [ 7] ArrayList.forEach
  [ 8] Cell.notifyLiveness
  [ 9] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-3 tid=369565]

--- 2612611824 ns (0.48%), 261 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801085910.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-5 tid=369567]

--- 2602663691 ns (0.48%), 260 samples
  [ 0] LinkedBlockingQueue.put
  [ 1] Channel.put
  [ 2] Cell.lambda$notifyLiveness$0
  [ 3] Cell$$Lambda$53.0x0000000801085098.accept
  [ 4] ArrayList.forEach
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-3 tid=369565]

--- 2582605642 ns (0.47%), 258 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$53.0x0000000801085098.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-6 tid=369568]

--- 2554252551 ns (0.47%), 255 samples
  [ 0] LinkedBlockingQueue.put
  [ 1] Channel.put
  [ 2] Cell.lambda$notifyLiveness$0
  [ 3] Cell$$Lambda$53.0x0000000801085098.accept
  [ 4] ArrayList.forEach
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-8 tid=369570]

--- 2544196432 ns (0.47%), 254 samples
  [ 0] LinkedBlockingQueue.enqueue
  [ 1] LinkedBlockingQueue.put
  [ 2] Channel.put
  [ 3] Cell.lambda$notifyLiveness$0
  [ 4] Cell$$Lambda$53.0x0000000801085098.accept
  [ 5] ArrayList.forEach
  [ 6] Cell.notifyLiveness
  [ 7] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-8 tid=369570]

--- 2542741570 ns (0.47%), 254 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801085910.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-7 tid=369569]

--- 2512704217 ns (0.46%), 251 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.signalNotEmpty
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] Cell.lambda$notifyLiveness$0
  [ 6] Cell$$Lambda$53.0x0000000801085098.accept
  [ 7] ArrayList.forEach
  [ 8] Cell.notifyLiveness
  [ 9] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-4 tid=369566]

--- 2409456759 ns (0.44%), 237 samples
  [ 0] __lll_lock_wake
  [ 1] Unsafe_Park
  [ 2] Unsafe.park
  [ 3] LockSupport.park
  [ 4] AbstractQueuedSynchronizer$ConditionNode.block
  [ 5] ForkJoinPool.unmanagedBlock
  [ 6] ForkJoinPool.managedBlock
  [ 7] AbstractQueuedSynchronizer$ConditionObject.await
  [ 8] LinkedBlockingQueue.take
  [ 9] Channel.take
  [10] GameOfLife.lambda$calculateFrame$6
  [11] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [12] Dimensions.forEachRowCol
  [13] GameOfLife.calculateFrame
  [14] GameOfLife.lambda$calculateFrameBlocking$7
  [15] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-9 tid=369571]

--- 2394035980 ns (0.44%), 239 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.take
  [ 3] Channel.take
  [ 4] Cell$$Lambda$57.0x0000000801085910.apply
  [ 5] ReferencePipeline$3$1.accept
  [ 6] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 7] AbstractPipeline.copyInto
  [ 8] AbstractPipeline.wrapAndCopyInto
  [ 9] ReduceOps$ReduceOp.evaluateSequential
  [10] AbstractPipeline.evaluate
  [11] IntPipeline.reduce
  [12] IntPipeline.sum
  [13] Cell.calculateNextState
  [14] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run
  [21] [Thread-8 tid=369570]

--- 2357611736 ns (0.43%), 231 samples
  [ 0] GameOfLife.lambda$calculateFrame$6
  [ 1] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [ 2] Dimensions.forEachRowCol
  [ 3] GameOfLife.calculateFrame
  [ 4] GameOfLife.lambda$calculateFrameBlocking$7
  [ 5] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [ 6] ThreadPoolExecutor.runWorker
  [ 7] ThreadPoolExecutor$Worker.run
  [ 8] Thread.run
  [ 9] [Thread-9 tid=369571]

--- 2332616350 ns (0.43%), 233 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.signalNotEmpty
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] Cell.lambda$notifyLiveness$0
  [ 6] Cell$$Lambda$53.0x0000000801085098.accept
  [ 7] ArrayList.forEach
  [ 8] Cell.notifyLiveness
  [ 9] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-2 tid=369564]

--- 2323845765 ns (0.43%), 232 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$53.0x0000000801085098.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-8 tid=369570]

--- 2313182768 ns (0.42%), 231 samples
  [ 0] __lock_text_start_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] __GI___pthread_cond_signal
  [ 9] Unsafe.unpark
  [10] LockSupport.unpark
  [11] AbstractQueuedSynchronizer.signalNext
  [12] AbstractQueuedSynchronizer.release
  [13] ReentrantLock.unlock
  [14] LinkedBlockingQueue.signalNotEmpty
  [15] LinkedBlockingQueue.put
  [16] Channel.put
  [17] Cell.calculateNextState
  [18] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [19] Iterable.forEach
  [20] CellsGroup.run
  [21] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [22] ThreadPoolExecutor.runWorker
  [23] ThreadPoolExecutor$Worker.run
  [24] Thread.run
  [25] [Thread-2 tid=369564]

--- 2307172056 ns (0.42%), 227 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.take
  [ 4] Channel.take
  [ 5] GameOfLife.lambda$calculateFrame$6
  [ 6] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [ 7] Dimensions.forEachRowCol
  [ 8] GameOfLife.calculateFrame
  [ 9] GameOfLife.lambda$calculateFrameBlocking$7
  [10] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-9 tid=369571]

--- 2292485610 ns (0.42%), 229 samples
  [ 0] LinkedBlockingQueue.enqueue
  [ 1] LinkedBlockingQueue.put
  [ 2] Channel.put
  [ 3] Cell.lambda$notifyLiveness$0
  [ 4] Cell$$Lambda$53.0x0000000801085098.accept
  [ 5] ArrayList.forEach
  [ 6] Cell.notifyLiveness
  [ 7] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-2 tid=369564]

--- 2262384324 ns (0.41%), 226 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.signalNotEmpty
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] Cell.lambda$notifyLiveness$0
  [ 6] Cell$$Lambda$53.0x0000000801085098.accept
  [ 7] ArrayList.forEach
  [ 8] Cell.notifyLiveness
  [ 9] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-6 tid=369568]

--- 2262258510 ns (0.41%), 226 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$57.0x0000000801085910.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-3 tid=369565]

--- 2245466421 ns (0.41%), 221 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.put
  [ 3] Channel.put
  [ 4] GameOfLife.lambda$calculateFrame$5
  [ 5] GameOfLife$$Lambda$52.0x0000000801084e78.accept
  [ 6] Dimensions.forEachRowCol
  [ 7] GameOfLife.calculateFrame
  [ 8] GameOfLife.lambda$calculateFrameBlocking$7
  [ 9] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-9 tid=369571]

--- 2243743779 ns (0.41%), 224 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LinkedBlockingQueue.signalNotEmpty
  [ 5] LinkedBlockingQueue.put
  [ 6] Channel.put
  [ 7] Cell.lambda$notifyLiveness$0
  [ 8] Cell$$Lambda$53.0x0000000801085098.accept
  [ 9] ArrayList.forEach
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-8 tid=369570]

--- 2213639562 ns (0.41%), 221 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$57.0x0000000801085910.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-8 tid=369570]

--- 2172350919 ns (0.40%), 217 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LinkedBlockingQueue.signalNotEmpty
  [ 5] LinkedBlockingQueue.put
  [ 6] Channel.put
  [ 7] Cell.lambda$notifyLiveness$0
  [ 8] Cell$$Lambda$53.0x0000000801085098.accept
  [ 9] ArrayList.forEach
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-2 tid=369564]

--- 2162168673 ns (0.40%), 216 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$57.0x0000000801085910.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-6 tid=369568]

--- 2142342237 ns (0.39%), 214 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.put
  [ 3] Channel.put
  [ 4] Cell.lambda$notifyLiveness$0
  [ 5] Cell$$Lambda$53.0x0000000801085098.accept
  [ 6] ArrayList.forEach
  [ 7] Cell.notifyLiveness
  [ 8] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-2 tid=369564]

--- 2112309483 ns (0.39%), 211 samples
  [ 0] LinkedBlockingQueue.put
  [ 1] Channel.put
  [ 2] Cell.lambda$notifyLiveness$0
  [ 3] Cell$$Lambda$53.0x0000000801085098.accept
  [ 4] ArrayList.forEach
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-2 tid=369564]

--- 2112269963 ns (0.39%), 211 samples
  [ 0] Cell$$Lambda$57.0x0000000801085910.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-4 tid=369566]

--- 2102169027 ns (0.39%), 210 samples
  [ 0] Cell$$Lambda$57.0x0000000801085910.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-5 tid=369567]

--- 2053379788 ns (0.38%), 205 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.signalNotEmpty
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] Cell.lambda$notifyLiveness$0
  [ 6] Cell$$Lambda$53.0x0000000801085098.accept
  [ 7] ArrayList.forEach
  [ 8] Cell.notifyLiveness
  [ 9] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-8 tid=369570]

--- 2052130784 ns (0.38%), 205 samples
  [ 0] Thread.getAndClearInterrupt
  [ 1] Thread.interrupted
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$53.0x0000000801085098.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-6 tid=369568]

--- 2032326274 ns (0.37%), 200 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LinkedBlockingQueue.signalNotEmpty
  [ 5] LinkedBlockingQueue.put
  [ 6] Channel.put
  [ 7] GameOfLife.lambda$calculateFrame$5
  [ 8] GameOfLife$$Lambda$52.0x0000000801084e78.accept
  [ 9] Dimensions.forEachRowCol
  [10] GameOfLife.calculateFrame
  [11] GameOfLife.lambda$calculateFrameBlocking$7
  [12] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-9 tid=369571]

--- 2032224494 ns (0.37%), 203 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$57.0x0000000801085910.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-4 tid=369566]

--- 2022086914 ns (0.37%), 202 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$57.0x0000000801085910.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-5 tid=369567]

--- 1972237979 ns (0.36%), 197 samples
  [ 0] Thread.getAndClearInterrupt
  [ 1] Thread.interrupted
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$53.0x0000000801085098.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-7 tid=369569]

--- 1972054800 ns (0.36%), 197 samples
  [ 0] Cell$$Lambda$57.0x0000000801085910.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-6 tid=369568]

--- 1971971032 ns (0.36%), 197 samples
  [ 0] Cell$$Lambda$57.0x0000000801085910.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-3 tid=369565]

--- 1902007319 ns (0.35%), 190 samples
  [ 0] Thread.getAndClearInterrupt
  [ 1] Thread.interrupted
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$53.0x0000000801085098.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-4 tid=369566]

--- 1792042418 ns (0.33%), 179 samples
  [ 0] Cell$$Lambda$57.0x0000000801085910.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-7 tid=369569]

--- 1771879538 ns (0.32%), 177 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$57.0x0000000801085910.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-7 tid=369569]

--- 1771874692 ns (0.32%), 177 samples
  [ 0] Thread.getAndClearInterrupt
  [ 1] Thread.interrupted
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$53.0x0000000801085098.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-5 tid=369567]

--- 1721879310 ns (0.32%), 172 samples
  [ 0] Cell$$Lambda$57.0x0000000801085910.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-2 tid=369564]

--- 1701909110 ns (0.31%), 170 samples
  [ 0] Cell$$Lambda$53.0x0000000801085098.accept
  [ 1] ArrayList.forEach
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-7 tid=369569]

--- 1602654621 ns (0.29%), 160 samples
  [ 0] Thread.getAndClearInterrupt
  [ 1] Thread.interrupted
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$53.0x0000000801085098.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-8 tid=369570]

--- 1601717241 ns (0.29%), 160 samples
  [ 0] Cell$$Lambda$53.0x0000000801085098.accept
  [ 1] ArrayList.forEach
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-6 tid=369568]

--- 1531630176 ns (0.28%), 153 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$57.0x0000000801085910.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-2 tid=369564]

--- 1501600621 ns (0.28%), 150 samples
  [ 0] Cell$$Lambda$53.0x0000000801085098.accept
  [ 1] ArrayList.forEach
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-5 tid=369567]

--- 1501578010 ns (0.28%), 150 samples
  [ 0] Thread.getAndClearInterrupt
  [ 1] Thread.interrupted
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$53.0x0000000801085098.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-3 tid=369565]

--- 1484036907 ns (0.27%), 146 samples
  [ 0] Dimensions.forEachRowCol
  [ 1] GameOfLife.calculateFrame
  [ 2] GameOfLife.lambda$calculateFrameBlocking$7
  [ 3] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-9 tid=369571]

--- 1453591601 ns (0.27%), 143 samples
  [ 0] __lock_text_start_[k]
  [ 1] try_to_wake_up_[k]
  [ 2] wake_up_q_[k]
  [ 3] futex_wake_[k]
  [ 4] do_futex_[k]
  [ 5] __x64_sys_futex_[k]
  [ 6] do_syscall_64_[k]
  [ 7] entry_SYSCALL_64_after_hwframe_[k]
  [ 8] __GI___pthread_cond_signal
  [ 9] Unsafe.unpark
  [10] LockSupport.unpark
  [11] AbstractQueuedSynchronizer.signalNext
  [12] AbstractQueuedSynchronizer.release
  [13] ReentrantLock.unlock
  [14] LinkedBlockingQueue.signalNotEmpty
  [15] LinkedBlockingQueue.put
  [16] Channel.put
  [17] GameOfLife.lambda$calculateFrame$5
  [18] GameOfLife$$Lambda$52.0x0000000801084e78.accept
  [19] Dimensions.forEachRowCol
  [20] GameOfLife.calculateFrame
  [21] GameOfLife.lambda$calculateFrameBlocking$7
  [22] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [23] ThreadPoolExecutor.runWorker
  [24] ThreadPoolExecutor$Worker.run
  [25] Thread.run
  [26] [Thread-9 tid=369571]

--- 1452324462 ns (0.27%), 145 samples
  [ 0] Cell$$Lambda$57.0x0000000801085910.apply
  [ 1] ReferencePipeline$3$1.accept
  [ 2] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 3] AbstractPipeline.copyInto
  [ 4] AbstractPipeline.wrapAndCopyInto
  [ 5] ReduceOps$ReduceOp.evaluateSequential
  [ 6] AbstractPipeline.evaluate
  [ 7] IntPipeline.reduce
  [ 8] IntPipeline.sum
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-8 tid=369570]

--- 1451612674 ns (0.27%), 145 samples
  [ 0] Cell$$Lambda$53.0x0000000801085098.accept
  [ 1] ArrayList.forEach
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-4 tid=369566]

--- 1432358161 ns (0.26%), 143 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.take
  [ 4] Channel.take
  [ 5] Cell$$Lambda$57.0x0000000801085910.apply
  [ 6] ReferencePipeline$3$1.accept
  [ 7] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 8] AbstractPipeline.copyInto
  [ 9] AbstractPipeline.wrapAndCopyInto
  [10] ReduceOps$ReduceOp.evaluateSequential
  [11] AbstractPipeline.evaluate
  [12] IntPipeline.reduce
  [13] IntPipeline.sum
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-8 tid=369570]

--- 1403419487 ns (0.26%), 138 samples
  [ 0] Parker::park(bool, long)
  [ 1] Unsafe_Park
  [ 2] Unsafe.park
  [ 3] LockSupport.park
  [ 4] AbstractQueuedSynchronizer$ConditionNode.block
  [ 5] ForkJoinPool.unmanagedBlock
  [ 6] ForkJoinPool.managedBlock
  [ 7] AbstractQueuedSynchronizer$ConditionObject.await
  [ 8] LinkedBlockingQueue.take
  [ 9] Channel.take
  [10] GameOfLife.lambda$calculateFrame$6
  [11] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [12] Dimensions.forEachRowCol
  [13] GameOfLife.calculateFrame
  [14] GameOfLife.lambda$calculateFrameBlocking$7
  [15] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-9 tid=369571]

--- 1342214238 ns (0.25%), 134 samples
  [ 0] Cell$$Lambda$53.0x0000000801085098.accept
  [ 1] ArrayList.forEach
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-8 tid=369570]

--- 1331718493 ns (0.24%), 131 samples
  [ 0] futex_wake_[k]
  [ 1] do_futex_[k]
  [ 2] __x64_sys_futex_[k]
  [ 3] do_syscall_64_[k]
  [ 4] entry_SYSCALL_64_after_hwframe_[k]
  [ 5] __lll_lock_wake
  [ 6] Unsafe_Park
  [ 7] Unsafe.park
  [ 8] LockSupport.park
  [ 9] AbstractQueuedSynchronizer$ConditionNode.block
  [10] ForkJoinPool.unmanagedBlock
  [11] ForkJoinPool.managedBlock
  [12] AbstractQueuedSynchronizer$ConditionObject.await
  [13] LinkedBlockingQueue.take
  [14] Channel.take
  [15] GameOfLife.lambda$calculateFrame$6
  [16] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [17] Dimensions.forEachRowCol
  [18] GameOfLife.calculateFrame
  [19] GameOfLife.lambda$calculateFrameBlocking$7
  [20] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [21] ThreadPoolExecutor.runWorker
  [22] ThreadPoolExecutor$Worker.run
  [23] Thread.run
  [24] [Thread-9 tid=369571]

--- 1321338422 ns (0.24%), 132 samples
  [ 0] Cell$$Lambda$53.0x0000000801085098.accept
  [ 1] ArrayList.forEach
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-3 tid=369565]

--- 1168525179 ns (0.21%), 115 samples
  [ 0] AtomicInteger.getAndDecrement
  [ 1] LinkedBlockingQueue.take
  [ 2] Channel.take
  [ 3] GameOfLife.lambda$calculateFrame$6
  [ 4] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [ 5] Dimensions.forEachRowCol
  [ 6] GameOfLife.calculateFrame
  [ 7] GameOfLife.lambda$calculateFrameBlocking$7
  [ 8] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [ 9] ThreadPoolExecutor.runWorker
  [10] ThreadPoolExecutor$Worker.run
  [11] Thread.run
  [12] [Thread-9 tid=369571]

--- 1161227173 ns (0.21%), 116 samples
  [ 0] __GI___pthread_cond_signal
  [ 1] Unsafe.unpark
  [ 2] LockSupport.unpark
  [ 3] AbstractQueuedSynchronizer.signalNext
  [ 4] AbstractQueuedSynchronizer.release
  [ 5] ReentrantLock.unlock
  [ 6] LinkedBlockingQueue.signalNotEmpty
  [ 7] LinkedBlockingQueue.put
  [ 8] Channel.put
  [ 9] Cell.calculateNextState
  [10] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-2 tid=369564]

--- 1091177622 ns (0.20%), 109 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-2 tid=369564]

--- 1071166991 ns (0.20%), 107 samples
  [ 0] Cell$$Lambda$53.0x0000000801085098.accept
  [ 1] ArrayList.forEach
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-2 tid=369564]

--- 1001071235 ns (0.18%), 100 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] Cell.notifyLiveness
  [ 7] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-2 tid=369564]

--- 971035822 ns (0.18%), 97 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$57.0x0000000801085910.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-4 tid=369566]

--- 941024532 ns (0.17%), 94 samples
  [ 0] Thread.getAndClearInterrupt
  [ 1] Thread.interrupted
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.lambda$notifyLiveness$0
  [ 7] Cell$$Lambda$53.0x0000000801085098.accept
  [ 8] ArrayList.forEach
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-2 tid=369564]

--- 920995342 ns (0.17%), 92 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-7 tid=369569]

--- 910983829 ns (0.17%), 91 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-4 tid=369566]

--- 910929461 ns (0.17%), 91 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$57.0x0000000801085910.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-6 tid=369568]

--- 910897861 ns (0.17%), 91 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$57.0x0000000801085910.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-5 tid=369567]

--- 891015377 ns (0.16%), 89 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] Cell.lambda$notifyLiveness$0
  [ 6] Cell$$Lambda$53.0x0000000801085098.accept
  [ 7] ArrayList.forEach
  [ 8] Cell.notifyLiveness
  [ 9] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-7 tid=369569]

--- 850862464 ns (0.16%), 85 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-6 tid=369568]

--- 841321811 ns (0.15%), 84 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-8 tid=369570]

--- 840884321 ns (0.15%), 84 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] Cell.lambda$notifyLiveness$0
  [ 6] Cell$$Lambda$53.0x0000000801085098.accept
  [ 7] ArrayList.forEach
  [ 8] Cell.notifyLiveness
  [ 9] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-5 tid=369567]

--- 840829598 ns (0.15%), 84 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$57.0x0000000801085910.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-3 tid=369565]

--- 831324465 ns (0.15%), 83 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$57.0x0000000801085910.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-8 tid=369570]

--- 800826357 ns (0.15%), 80 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] Cell.lambda$notifyLiveness$0
  [ 6] Cell$$Lambda$53.0x0000000801085098.accept
  [ 7] ArrayList.forEach
  [ 8] Cell.notifyLiveness
  [ 9] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-4 tid=369566]

--- 791342209 ns (0.15%), 79 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] Cell.lambda$notifyLiveness$0
  [ 6] Cell$$Lambda$53.0x0000000801085098.accept
  [ 7] ArrayList.forEach
  [ 8] Cell.notifyLiveness
  [ 9] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-8 tid=369570]

--- 790814608 ns (0.15%), 79 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] Cell.lambda$notifyLiveness$0
  [ 6] Cell$$Lambda$53.0x0000000801085098.accept
  [ 7] ArrayList.forEach
  [ 8] Cell.notifyLiveness
  [ 9] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-3 tid=369565]

--- 750804718 ns (0.14%), 75 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$57.0x0000000801085910.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-2 tid=369564]

--- 740897881 ns (0.14%), 74 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$53.0x0000000801085098.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-7 tid=369569]

--- 740724160 ns (0.14%), 74 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-3 tid=369565]

--- 700770416 ns (0.13%), 70 samples
  [ 0] Channel.take
  [ 1] Cell$$Lambda$57.0x0000000801085910.apply
  [ 2] ReferencePipeline$3$1.accept
  [ 3] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 4] AbstractPipeline.copyInto
  [ 5] AbstractPipeline.wrapAndCopyInto
  [ 6] ReduceOps$ReduceOp.evaluateSequential
  [ 7] AbstractPipeline.evaluate
  [ 8] IntPipeline.reduce
  [ 9] IntPipeline.sum
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-7 tid=369569]

--- 691726664 ns (0.13%), 68 samples
  [ 0] hash_futex_[k]
  [ 1] do_futex_[k]
  [ 2] __x64_sys_futex_[k]
  [ 3] do_syscall_64_[k]
  [ 4] entry_SYSCALL_64_after_hwframe_[k]
  [ 5] __lll_lock_wake
  [ 6] Unsafe_Park
  [ 7] Unsafe.park
  [ 8] LockSupport.park
  [ 9] AbstractQueuedSynchronizer$ConditionNode.block
  [10] ForkJoinPool.unmanagedBlock
  [11] ForkJoinPool.managedBlock
  [12] AbstractQueuedSynchronizer$ConditionObject.await
  [13] LinkedBlockingQueue.take
  [14] Channel.take
  [15] GameOfLife.lambda$calculateFrame$6
  [16] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [17] Dimensions.forEachRowCol
  [18] GameOfLife.calculateFrame
  [19] GameOfLife.lambda$calculateFrameBlocking$7
  [20] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [21] ThreadPoolExecutor.runWorker
  [22] ThreadPoolExecutor$Worker.run
  [23] Thread.run
  [24] [Thread-9 tid=369571]

--- 690741221 ns (0.13%), 69 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] Cell.lambda$notifyLiveness$0
  [ 6] Cell$$Lambda$53.0x0000000801085098.accept
  [ 7] ArrayList.forEach
  [ 8] Cell.notifyLiveness
  [ 9] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-6 tid=369568]

--- 680762566 ns (0.12%), 67 samples
  [ 0] Channel.take
  [ 1] GameOfLife.lambda$calculateFrame$6
  [ 2] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [ 3] Dimensions.forEachRowCol
  [ 4] GameOfLife.calculateFrame
  [ 5] GameOfLife.lambda$calculateFrameBlocking$7
  [ 6] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-9 tid=369571]

--- 660704841 ns (0.12%), 66 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] Cell.notifyLiveness
  [ 7] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-5 tid=369567]

--- 650690497 ns (0.12%), 65 samples
  [ 0] LinkedBlockingQueue.enqueue
  [ 1] LinkedBlockingQueue.put
  [ 2] Channel.put
  [ 3] Cell.calculateNextState
  [ 4] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-2 tid=369564]

--- 641018619 ns (0.12%), 64 samples
  [ 0] itable stub
  [ 1] Sink$ChainedReference.end
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-8 tid=369570]

--- 640697578 ns (0.12%), 64 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.put
  [ 4] Channel.put
  [ 5] Cell.lambda$notifyLiveness$0
  [ 6] Cell$$Lambda$53.0x0000000801085098.accept
  [ 7] ArrayList.forEach
  [ 8] Cell.notifyLiveness
  [ 9] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-2 tid=369564]

--- 640480259 ns (0.12%), 63 samples
  [ 0] syscall_enter_from_user_mode_[k]
  [ 1] do_syscall_64_[k]
  [ 2] entry_SYSCALL_64_after_hwframe_[k]
  [ 3] __lll_lock_wake
  [ 4] Unsafe_Park
  [ 5] Unsafe.park
  [ 6] LockSupport.park
  [ 7] AbstractQueuedSynchronizer$ConditionNode.block
  [ 8] ForkJoinPool.unmanagedBlock
  [ 9] ForkJoinPool.managedBlock
  [10] AbstractQueuedSynchronizer$ConditionObject.await
  [11] LinkedBlockingQueue.take
  [12] Channel.take
  [13] GameOfLife.lambda$calculateFrame$6
  [14] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [15] Dimensions.forEachRowCol
  [16] GameOfLife.calculateFrame
  [17] GameOfLife.lambda$calculateFrameBlocking$7
  [18] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-9 tid=369571]

--- 620655806 ns (0.11%), 62 samples
  [ 0] itable stub
  [ 1] Sink$ChainedReference.end
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-5 tid=369567]

--- 610658513 ns (0.11%), 61 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.put
  [ 5] Channel.put
  [ 6] Cell.calculateNextState
  [ 7] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-5 tid=369567]

--- 610611666 ns (0.11%), 61 samples
  [ 0] itable stub
  [ 1] Sink$ChainedReference.end
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-6 tid=369568]

--- 590648197 ns (0.11%), 59 samples
  [ 0] LinkedBlockingQueue.put
  [ 1] Channel.put
  [ 2] Cell.calculateNextState
  [ 3] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-2 tid=369564]

--- 590625415 ns (0.11%), 59 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] Cell.notifyLiveness
  [ 7] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-7 tid=369569]

--- 590609019 ns (0.11%), 59 samples
  [ 0] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-6 tid=369568]

--- 580631138 ns (0.11%), 58 samples
  [ 0] itable stub
  [ 1] Sink$ChainedReference.end
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-4 tid=369566]

--- 580569934 ns (0.11%), 58 samples
  [ 0] itable stub
  [ 1] Sink$ChainedReference.end
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-3 tid=369565]

--- 570943032 ns (0.10%), 57 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$53.0x0000000801085098.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-8 tid=369570]

--- 570627193 ns (0.10%), 57 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$53.0x0000000801085098.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-4 tid=369566]

--- 570621327 ns (0.10%), 57 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$57.0x0000000801085910.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-4 tid=369566]

--- 570588690 ns (0.10%), 57 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] Cell.notifyLiveness
  [ 7] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-3 tid=369565]

--- 569080731 ns (0.10%), 56 samples
  [ 0] ___pthread_cond_wait
  [ 1] [unknown]
  [ 2] Unsafe.park
  [ 3] LockSupport.park
  [ 4] AbstractQueuedSynchronizer$ConditionNode.block
  [ 5] ForkJoinPool.unmanagedBlock
  [ 6] ForkJoinPool.managedBlock
  [ 7] AbstractQueuedSynchronizer$ConditionObject.await
  [ 8] LinkedBlockingQueue.take
  [ 9] Channel.take
  [10] GameOfLife.lambda$calculateFrame$6
  [11] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [12] Dimensions.forEachRowCol
  [13] GameOfLife.calculateFrame
  [14] GameOfLife.lambda$calculateFrameBlocking$7
  [15] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-9 tid=369571]

--- 560629053 ns (0.10%), 56 samples
  [ 0] itable stub
  [ 1] Sink$ChainedReference.end
  [ 2] AbstractPipeline.copyInto
  [ 3] AbstractPipeline.wrapAndCopyInto
  [ 4] ReduceOps$ReduceOp.evaluateSequential
  [ 5] AbstractPipeline.evaluate
  [ 6] IntPipeline.reduce
  [ 7] IntPipeline.sum
  [ 8] Cell.calculateNextState
  [ 9] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [10] Iterable.forEach
  [11] CellsGroup.run
  [12] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-7 tid=369569]

--- 560615989 ns (0.10%), 56 samples
  [ 0] Channel.take
  [ 1] Cell.notifyLiveness
  [ 2] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 3] Iterable.forEach
  [ 4] CellsGroup.run
  [ 5] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 6] ThreadPoolExecutor.runWorker
  [ 7] ThreadPoolExecutor$Worker.run
  [ 8] Thread.run
  [ 9] [Thread-4 tid=369566]

--- 560596713 ns (0.10%), 56 samples
  [ 0] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-5 tid=369567]

--- 550601253 ns (0.10%), 55 samples
  [ 0] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-4 tid=369566]

--- 550550623 ns (0.10%), 55 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$57.0x0000000801085910.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-5 tid=369567]

--- 549158518 ns (0.10%), 54 samples
  [ 0] Unsafe.park
  [ 1] LockSupport.park
  [ 2] AbstractQueuedSynchronizer$ConditionNode.block
  [ 3] ForkJoinPool.unmanagedBlock
  [ 4] ForkJoinPool.managedBlock
  [ 5] AbstractQueuedSynchronizer$ConditionObject.await
  [ 6] LinkedBlockingQueue.take
  [ 7] Channel.take
  [ 8] GameOfLife.lambda$calculateFrame$6
  [ 9] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [10] Dimensions.forEachRowCol
  [11] GameOfLife.calculateFrame
  [12] GameOfLife.lambda$calculateFrameBlocking$7
  [13] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run
  [17] [Thread-9 tid=369571]

--- 540618657 ns (0.10%), 54 samples
  [ 0] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-7 tid=369569]

--- 520579874 ns (0.10%), 52 samples
  [ 0] AbstractOwnableSynchronizer.getExclusiveOwnerThread
  [ 1] ReentrantLock$Sync.tryRelease
  [ 2] AbstractQueuedSynchronizer.release
  [ 3] ReentrantLock.unlock
  [ 4] LinkedBlockingQueue.signalNotEmpty
  [ 5] LinkedBlockingQueue.put
  [ 6] Channel.put
  [ 7] Cell.lambda$notifyLiveness$0
  [ 8] Cell$$Lambda$53.0x0000000801085098.accept
  [ 9] ArrayList.forEach
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-4 tid=369566]

--- 510567320 ns (0.09%), 51 samples
  [ 0] AbstractQueuedSynchronizer.release
  [ 1] ReentrantLock.unlock
  [ 2] LinkedBlockingQueue.put
  [ 3] Channel.put
  [ 4] Cell.calculateNextState
  [ 5] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 6] Iterable.forEach
  [ 7] CellsGroup.run
  [ 8] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 9] ThreadPoolExecutor.runWorker
  [10] ThreadPoolExecutor$Worker.run
  [11] Thread.run
  [12] [Thread-2 tid=369564]

--- 510559409 ns (0.09%), 51 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] Cell.notifyLiveness
  [ 7] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-4 tid=369566]

--- 510520670 ns (0.09%), 51 samples
  [ 0] Cell.lambda$notifyLiveness$0
  [ 1] Cell$$Lambda$53.0x0000000801085098.accept
  [ 2] ArrayList.forEach
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-6 tid=369568]

--- 508594282 ns (0.09%), 50 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.tryAcquire
  [ 2] AbstractQueuedSynchronizer.acquire
  [ 3] AbstractQueuedSynchronizer$ConditionObject.await
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] GameOfLife.lambda$calculateFrame$6
  [ 7] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [ 8] Dimensions.forEachRowCol
  [ 9] GameOfLife.calculateFrame
  [10] GameOfLife.lambda$calculateFrameBlocking$7
  [11] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-9 tid=369571]

--- 500529819 ns (0.09%), 50 samples
  [ 0] __pthread_mutex_lock@GLIBC_2.2.5
  [ 1] Unsafe_Unpark
  [ 2] Unsafe.unpark
  [ 3] LockSupport.unpark
  [ 4] AbstractQueuedSynchronizer.signalNext
  [ 5] AbstractQueuedSynchronizer.release
  [ 6] ReentrantLock.unlock
  [ 7] LinkedBlockingQueue.signalNotEmpty
  [ 8] LinkedBlockingQueue.put
  [ 9] Channel.put
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-2 tid=369564]

--- 490576624 ns (0.09%), 49 samples
  [ 0] Thread.interrupted
  [ 1] ReentrantLock$Sync.lockInterruptibly
  [ 2] ReentrantLock.lockInterruptibly
  [ 3] LinkedBlockingQueue.take
  [ 4] Channel.take
  [ 5] Cell.notifyLiveness
  [ 6] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 7] Iterable.forEach
  [ 8] CellsGroup.run
  [ 9] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-2 tid=369564]

--- 490501246 ns (0.09%), 49 samples
  [ 0] LinkedBlockingQueue.enqueue
  [ 1] LinkedBlockingQueue.put
  [ 2] Channel.put
  [ 3] Cell.calculateNextState
  [ 4] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-7 tid=369569]

--- 480798504 ns (0.09%), 48 samples
  [ 0] Channel.take
  [ 1] Cell.notifyLiveness
  [ 2] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 3] Iterable.forEach
  [ 4] CellsGroup.run
  [ 5] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 6] ThreadPoolExecutor.runWorker
  [ 7] ThreadPoolExecutor$Worker.run
  [ 8] Thread.run
  [ 9] [Thread-8 tid=369570]

--- 480646109 ns (0.09%), 48 samples
  [ 0] futex_wake_[k]
  [ 1] do_futex_[k]
  [ 2] __x64_sys_futex_[k]
  [ 3] do_syscall_64_[k]
  [ 4] entry_SYSCALL_64_after_hwframe_[k]
  [ 5] __GI___pthread_cond_signal
  [ 6] Unsafe.unpark
  [ 7] LockSupport.unpark
  [ 8] AbstractQueuedSynchronizer.signalNext
  [ 9] AbstractQueuedSynchronizer.release
  [10] ReentrantLock.unlock
  [11] LinkedBlockingQueue.signalNotEmpty
  [12] LinkedBlockingQueue.put
  [13] Channel.put
  [14] Cell.calculateNextState
  [15] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [16] Iterable.forEach
  [17] CellsGroup.run
  [18] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [19] ThreadPoolExecutor.runWorker
  [20] ThreadPoolExecutor$Worker.run
  [21] Thread.run
  [22] [Thread-2 tid=369564]

--- 480532527 ns (0.09%), 48 samples
  [ 0] Channel.take
  [ 1] Cell.notifyLiveness
  [ 2] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 3] Iterable.forEach
  [ 4] CellsGroup.run
  [ 5] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 6] ThreadPoolExecutor.runWorker
  [ 7] ThreadPoolExecutor$Worker.run
  [ 8] Thread.run
  [ 9] [Thread-6 tid=369568]

--- 480498594 ns (0.09%), 48 samples
  [ 0] AbstractOwnableSynchronizer.getExclusiveOwnerThread
  [ 1] ReentrantLock$Sync.tryRelease
  [ 2] AbstractQueuedSynchronizer.release
  [ 3] ReentrantLock.unlock
  [ 4] LinkedBlockingQueue.signalNotEmpty
  [ 5] LinkedBlockingQueue.put
  [ 6] Channel.put
  [ 7] Cell.lambda$notifyLiveness$0
  [ 8] Cell$$Lambda$53.0x0000000801085098.accept
  [ 9] ArrayList.forEach
  [10] Cell.notifyLiveness
  [11] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run
  [18] [Thread-5 tid=369567]

--- 478097748 ns (0.09%), 47 samples
  [ 0] futex_wait_setup_[k]
  [ 1] futex_wait_[k]
  [ 2] do_futex_[k]
  [ 3] __x64_sys_futex_[k]
  [ 4] do_syscall_64_[k]
  [ 5] entry_SYSCALL_64_after_hwframe_[k]
  [ 6] __GI___futex_abstimed_wait_cancelable64
  [ 7] Unsafe.park
  [ 8] LockSupport.park
  [ 9] AbstractQueuedSynchronizer$ConditionNode.block
  [10] ForkJoinPool.unmanagedBlock
  [11] ForkJoinPool.managedBlock
  [12] AbstractQueuedSynchronizer$ConditionObject.await
  [13] LinkedBlockingQueue.take
  [14] Channel.take
  [15] GameOfLife.lambda$calculateFrame$6
  [16] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [17] Dimensions.forEachRowCol
  [18] GameOfLife.calculateFrame
  [19] GameOfLife.lambda$calculateFrameBlocking$7
  [20] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [21] ThreadPoolExecutor.runWorker
  [22] ThreadPoolExecutor$Worker.run
  [23] Thread.run
  [24] [Thread-9 tid=369571]

--- 478031853 ns (0.09%), 47 samples
  [ 0] ___pthread_mutex_unlock
  [ 1] Unsafe_Park
  [ 2] Unsafe.park
  [ 3] LockSupport.park
  [ 4] AbstractQueuedSynchronizer$ConditionNode.block
  [ 5] ForkJoinPool.unmanagedBlock
  [ 6] ForkJoinPool.managedBlock
  [ 7] AbstractQueuedSynchronizer$ConditionObject.await
  [ 8] LinkedBlockingQueue.take
  [ 9] Channel.take
  [10] GameOfLife.lambda$calculateFrame$6
  [11] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [12] Dimensions.forEachRowCol
  [13] GameOfLife.calculateFrame
  [14] GameOfLife.lambda$calculateFrameBlocking$7
  [15] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-9 tid=369571]

--- 470536096 ns (0.09%), 47 samples
  [ 0] Channel.take
  [ 1] Cell.notifyLiveness
  [ 2] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 3] Iterable.forEach
  [ 4] CellsGroup.run
  [ 5] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 6] ThreadPoolExecutor.runWorker
  [ 7] ThreadPoolExecutor$Worker.run
  [ 8] Thread.run
  [ 9] [Thread-7 tid=369569]

--- 470519649 ns (0.09%), 47 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lockInterruptibly
  [ 3] ReentrantLock.lockInterruptibly
  [ 4] LinkedBlockingQueue.take
  [ 5] Channel.take
  [ 6] Cell.notifyLiveness
  [ 7] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 8] Iterable.forEach
  [ 9] CellsGroup.run
  [10] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [11] ThreadPoolExecutor.runWorker
  [12] ThreadPoolExecutor$Worker.run
  [13] Thread.run
  [14] [Thread-6 tid=369568]

--- 470489671 ns (0.09%), 47 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-4 tid=369566]

--- 470487210 ns (0.09%), 47 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$57.0x0000000801085910.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-3 tid=369565]

--- 470484748 ns (0.09%), 47 samples
  [ 0] AbstractQueuedSynchronizer.compareAndSetState
  [ 1] ReentrantLock$NonfairSync.initialTryLock
  [ 2] ReentrantLock$Sync.lock
  [ 3] ReentrantLock.lock
  [ 4] LinkedBlockingQueue.signalNotEmpty
  [ 5] LinkedBlockingQueue.put
  [ 6] Channel.put
  [ 7] Cell.calculateNextState
  [ 8] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 9] Iterable.forEach
  [10] CellsGroup.run
  [11] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [12] ThreadPoolExecutor.runWorker
  [13] ThreadPoolExecutor$Worker.run
  [14] Thread.run
  [15] [Thread-6 tid=369568]

--- 470468210 ns (0.09%), 47 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$57.0x0000000801085910.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-6 tid=369568]

--- 467771803 ns (0.09%), 46 samples
  [ 0] AbstractQueuedSynchronizer$ConditionObject.canReacquire
  [ 1] AbstractQueuedSynchronizer$ConditionObject.await
  [ 2] LinkedBlockingQueue.take
  [ 3] Channel.take
  [ 4] GameOfLife.lambda$calculateFrame$6
  [ 5] GameOfLife$$Lambda$55.0x00000008010854d8.accept
  [ 6] Dimensions.forEachRowCol
  [ 7] GameOfLife.calculateFrame
  [ 8] GameOfLife.lambda$calculateFrameBlocking$7
  [ 9] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [10] ThreadPoolExecutor.runWorker
  [11] ThreadPoolExecutor$Worker.run
  [12] Thread.run
  [13] [Thread-9 tid=369571]

--- 467338414 ns (0.09%), 46 samples
  [ 0] AbstractOwnableSynchronizer.getExclusiveOwnerThread
  [ 1] ReentrantLock$Sync.tryRelease
  [ 2] AbstractQueuedSynchronizer.release
  [ 3] ReentrantLock.unlock
  [ 4] LinkedBlockingQueue.signalNotEmpty
  [ 5] LinkedBlockingQueue.put
  [ 6] Channel.put
  [ 7] GameOfLife.lambda$calculateFrame$5
  [ 8] GameOfLife$$Lambda$52.0x0000000801084e78.accept
  [ 9] Dimensions.forEachRowCol
  [10] GameOfLife.calculateFrame
  [11] GameOfLife.lambda$calculateFrameBlocking$7
  [12] GameOfLife$$Lambda$51.0x0000000801084c68.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run
  [16] [Thread-9 tid=369571]

--- 460726996 ns (0.08%), 46 samples
  [ 0] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 1] Iterable.forEach
  [ 2] CellsGroup.run
  [ 3] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 4] ThreadPoolExecutor.runWorker
  [ 5] ThreadPoolExecutor$Worker.run
  [ 6] Thread.run
  [ 7] [Thread-8 tid=369570]

--- 460693599 ns (0.08%), 46 samples
  [ 0] LinkedBlockingQueue.dequeue
  [ 1] LinkedBlockingQueue.take
  [ 2] Channel.take
  [ 3] Cell.notifyLiveness
  [ 4] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-8 tid=369570]

--- 460525951 ns (0.08%), 46 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell$$Lambda$57.0x0000000801085910.apply
  [ 3] ReferencePipeline$3$1.accept
  [ 4] ArrayList$ArrayListSpliterator.forEachRemaining
  [ 5] AbstractPipeline.copyInto
  [ 6] AbstractPipeline.wrapAndCopyInto
  [ 7] ReduceOps$ReduceOp.evaluateSequential
  [ 8] AbstractPipeline.evaluate
  [ 9] IntPipeline.reduce
  [10] IntPipeline.sum
  [11] Cell.calculateNextState
  [12] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [13] Iterable.forEach
  [14] CellsGroup.run
  [15] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [16] ThreadPoolExecutor.runWorker
  [17] ThreadPoolExecutor$Worker.run
  [18] Thread.run
  [19] [Thread-2 tid=369564]

--- 460491323 ns (0.08%), 46 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-7 tid=369569]

--- 460474021 ns (0.08%), 46 samples
  [ 0] LinkedBlockingQueue.enqueue
  [ 1] LinkedBlockingQueue.put
  [ 2] Channel.put
  [ 3] Cell.calculateNextState
  [ 4] CellsGroup$$Lambda$56.0x00000008010856f8.accept
  [ 5] Iterable.forEach
  [ 6] CellsGroup.run
  [ 7] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 8] ThreadPoolExecutor.runWorker
  [ 9] ThreadPoolExecutor$Worker.run
  [10] Thread.run
  [11] [Thread-6 tid=369568]

--- 460471855 ns (0.08%), 46 samples
  [ 0] LinkedBlockingQueue.take
  [ 1] Channel.take
  [ 2] Cell.notifyLiveness
  [ 3] CellsGroup$$Lambda$49.0x0000000801084430.accept
  [ 4] Iterable.forEach
  [ 5] CellsGroup.run
  [ 6] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [ 7] ThreadPoolExecutor.runWorker
  [ 8] ThreadPoolExecutor$Worker.run
  [ 9] Thread.run
  [10] [Thread-6 tid=369568]

          ns  percent  samples  top
  ----------  -------  -------  ---
112277567679   20.59%    11199  AbstractQueuedSynchronizer.compareAndSetState
 69654173628   12.78%     6946  AbstractQueuedSynchronizer.release
 33015139873    6.06%     3297  LinkedBlockingQueue.put
 32962969234    6.05%     3285  LinkedBlockingQueue.take
 32633235833    5.99%     3253  LinkedBlockingQueue.dequeue
 30384140126    5.57%     3035  ReduceOps$5ReducingSink.get
 24841244809    4.56%     2477  Thread.interrupted
 23259267419    4.27%     2323  LinkedBlockingQueue.enqueue
 15517316820    2.85%     1550  Cell$$Lambda$57.0x0000000801085910.apply
 13405617496    2.46%     1339  Thread.getAndClearInterrupt
 10722446339    1.97%     1071  Cell$$Lambda$53.0x0000000801085098.accept
 10452180504    1.92%     1043  Channel.take
  9734267102    1.79%      958  GameOfLife.lambda$calculateFrame$5
  5838536856    1.07%      579  __lock_text_start_[k]
  5566402640    1.02%      556  Cell.lambda$notifyLiveness$0
  5386056659    0.99%      538  ReferencePipeline$3$1.accept
  4534221950    0.83%      452  AbstractOwnableSynchronizer.getExclusiveOwnerThread
  4081907893    0.75%      406  AtomicInteger.getAndDecrement
  3976903483    0.73%      397  ReentrantLock$Sync.tryRelease
  3914460114    0.72%      391  itable stub
  3904443981    0.72%      390  CellsGroup$$Lambda$49.0x0000000801084430.accept
  3195024486    0.59%      319  AtomicInteger.getAndIncrement
  3160908454    0.58%      310  GameOfLife.lambda$calculateFrame$6
  2725174299    0.50%      272  AbstractQueuedSynchronizer$ConditionObject.signal
  2723119099    0.50%      272  Sink$ChainedReference.<init>
  2703127542    0.50%      270  ArrayList.forEach
  2691723772    0.49%      265  __lll_lock_wake
  2668634322    0.49%      266  AbstractQueuedSynchronizer.setState
  2585870675    0.47%      258  ReentrantLock$Sync.lockInterruptibly
  2465672634    0.45%      246  ReentrantLock.lockInterruptibly
  2306879162    0.42%      228  futex_wake_[k]
  2202450986    0.40%      220  ReferencePipeline$3.opWrapSink
  2076868795    0.38%      207  AbstractQueuedSynchronizer.signalNext
  2059298013    0.38%      204  syscall_enter_from_user_mode_[k]
  1835461329    0.34%      181  Parker::park(bool, long)
  1818941559    0.33%      181  __GI___pthread_cond_signal
  1782000929    0.33%      178  StreamSupport.stream
  1758555379    0.32%      173  Dimensions.forEachRowCol
  1641849940    0.30%      164  AbstractPipeline.<init>
  1482522906    0.27%      148  ReentrantLock$Sync.isHeldExclusively
  1452854367    0.27%      144  ___pthread_cond_wait
  1451529825    0.27%      145  ReferencePipeline$4.opWrapSink
  1444044831    0.26%      144  AbstractQueuedSynchronizer.getState
  1441651836    0.26%      144  Sink$ChainedReference.end
  1401569400    0.26%      140  ReentrantLock$Sync.lock
  1196428255    0.22%      118  hash_futex_[k]
  1131285543    0.21%      113  AbstractPipeline.wrapSink
  1131274980    0.21%      113  ArrayList$SubList$1.next
  1121310422    0.21%      112  Iterable.forEach
  1061132069    0.19%      106  ReduceOps$5ReducingSink.accept
  1044816775    0.19%      103  AbstractQueuedSynchronizer.acquire
  1041146411    0.19%      104  vtable stub
  1001097355    0.18%      100  ReferencePipeline$4$1.accept
   950229162    0.17%       94  ___pthread_mutex_unlock
   910599728    0.17%       90  __x64_sys_futex_[k]
   820921388    0.15%       82  Cell.calculateNextState
   800905853    0.15%       80  Sink$ChainedReference.begin
   800714014    0.15%       79  Unsafe.park
   732972986    0.13%       73  __pthread_mutex_lock@GLIBC_2.2.5
   720846404    0.13%       72  Object.<init>
   713838971    0.13%       71  __GI___futex_abstimed_wait_cancelable64
   700762507    0.13%       70  LinkedBlockingQueue.signalNotEmpty
   660739902    0.12%       66  ReentrantLock.lock
   648799158    0.12%       64  get_futex_key_[k]
   640707148    0.12%       64  ArrayList.spliterator
   619069994    0.11%       61  futex_wait_setup_[k]
   618912927    0.11%       61  Unsafe_Park
   610701907    0.11%       61  StreamOpFlag.fromCharacteristics
   599035717    0.11%       59  AbstractQueuedSynchronizer$ConditionNode.isReleasable
   592779992    0.11%       59  mark_wake_futex_[k]
   592175644    0.11%       59  Channel.put
   590681571    0.11%       59  ArrayList$ArrayListSpliterator.forEachRemaining
   589324367    0.11%       58  ImmutableCollections$ListN.get
   588477755    0.11%       58  AbstractQueuedSynchronizer$ConditionObject.canReacquire
   579334853    0.11%       57  GameOfLife$$Lambda$55.0x00000008010854d8.accept
   560586204    0.10%       56  Cell$$Lambda$58.0x0000000801085b38.applyAsInt
   472761556    0.09%       47  _raw_spin_lock_[k]
   460538490    0.08%       46  Collection.stream
   434984364    0.08%       43  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<286822ul, G1BarrierSet>, (AccessInternal::BarrierType)3, 286822ul>::oop_access_barrier(oopDesc*, long)
   395123196    0.07%       39  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<548964ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 548964ul>::oop_access_barrier(void*)
   373997437    0.07%       37  do_futex_[k]
   331270280    0.06%       33  Unsafe.getAndBitwiseAndInt
   323357328    0.06%       32  AbstractOwnableSynchronizer.setExclusiveOwnerThread
   321803187    0.06%       32  ThreadsListHandle::ThreadsListHandle(Thread*)
   321450793    0.06%       32  Unsafe_Unpark
   301757283    0.06%       30  __schedule_[k]
   301133439    0.06%       30  __unqueue_futex_[k]
   294081201    0.05%       29  schedule_[k]
   292003270    0.05%       29  AbstractQueuedSynchronizer.enqueue
   290747995    0.05%       29  AbstractQueuedSynchronizer$ConditionObject.doSignal
   290280456    0.05%       29  ArrayList$SubList$1.checkForComodification
   273196591    0.05%       27  __GI___pthread_mutex_trylock
   271125566    0.05%       27  __pthread_disable_asynccancel
   270272661    0.05%       27  PipelineHelper.<init>
   262555083    0.05%       26  ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**)
   260553107    0.05%       26  AbstractQueuedSynchronizer.casTail
   253987108    0.05%       25  GameOfLife$$Lambda$52.0x0000000801084e78.accept
   233011370    0.04%       23  futex_wait_[k]
   230246293    0.04%       23  CellsGroup$$Lambda$56.0x00000008010856f8.accept
   230239172    0.04%       23  ArrayList$SubList$1.hasNext
   211233311    0.04%       21  wake_up_q_[k]
   203213543    0.04%       20  __get_user_nocheck_4_[k]
   202581997    0.04%       20  AbstractQueuedSynchronizer$ConditionNode.block
   202358200    0.04%       20  do_syscall_64_[k]
   192603589    0.04%       19  futex_wait_queue_me_[k]
   190638427    0.03%       19  __tls_get_addr
   190244697    0.03%       19  CellsGroup.run
   182868978    0.03%       18  java_lang_Thread::set_thread_status(oopDesc*, JavaThreadStatus)
   181381541    0.03%       18  java_lang_Thread::get_thread_status(oopDesc*)
   181160841    0.03%       18  AbstractQueuedSynchronizer$ConditionObject.enableWait
   180833695    0.03%       18  wake_q_add_safe_[k]
   180202395    0.03%       18  Cell.notifyLiveness
   170184760    0.03%       17  ReferencePipeline.<init>
   162604393    0.03%       16  Integer.intValue
   151954004    0.03%       15  __GI___pthread_mutex_unlock_usercnt
   151587334    0.03%       15  __pthread_mutex_cond_lock
   151530369    0.03%       15  JavaThread::threadObj() const
   150153351    0.03%       15  ReferencePipeline.mapToInt
   141271206    0.03%       14  AtomicInteger.get
   140477917    0.03%       14  Unsafe.unpark
   120926709    0.02%       12  __pthread_enable_asynccancel
   120158732    0.02%       12  try_to_wake_up_[k]
   100104832    0.02%       10  ReferencePipeline$3.<init>
    81124520    0.01%        8  AbstractQueuedSynchronizer$ConditionObject.await
    80723203    0.01%        8  ForkJoinPool.unmanagedBlock
    80080185    0.01%        8  StreamOpFlag.combineOpFlags
    70845809    0.01%        7  syscall_exit_to_user_mode_[k]
    70553903    0.01%        7  __GI___pthread_cleanup_pop
    70379471    0.01%        7  ThreadsListHandle::~ThreadsListHandle()
    70216185    0.01%        7  SafeThreadsListPtr::release_stable_list()
    70072892    0.01%        7  DirectMethodHandle$Holder.newInvokeSpecial
    61248531    0.01%        6  ReentrantLock$NonfairSync.initialTryLock
    60061976    0.01%        6  ArrayList.elementAt
    50417244    0.01%        5  plist_add_[k]
    50194075    0.01%        5  __pthread_cleanup_push
    50122277    0.01%        5  __memset_avx2_erms
    50110089    0.01%        5  G1ParScanThreadState::trim_queue_to_threshold(unsigned int)
    50066442    0.01%        5  pthread_mutex_unlock@plt
    50053460    0.01%        5  IntPipeline.<init>
    40637169    0.01%        4  java_lang_Thread::interrupted(oopDesc*)
    40448613    0.01%        4  JavaThread::is_interrupted(bool)
    40335714    0.01%        4  MemAllocator::allocate() const
    40049127    0.01%        4  Objects.requireNonNull
    30372200    0.01%        3  AbstractQueuedSynchronizer$Node.setPrevRelaxed
    30185539    0.01%        3  java_lang_Thread::thread(oopDesc*)
    30174147    0.01%        3  AccessInternal::PostRuntimeDispatch<G1BarrierSet::AccessBarrier<544868ul, G1BarrierSet>, (AccessInternal::BarrierType)2, 544868ul>::oop_access_barrier(void*)
    30099305    0.01%        3  G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*)
    30066753    0.01%        3  G1FromCardCache::clear(unsigned int)
    30052241    0.01%        3  void OopOopIterateDispatch<G1ScanCardClosure>::Table::oop_oop_iterate<InstanceKlass, narrowOop>(G1ScanCardClosure*, oopDesc*, Klass*)
    30037868    0.01%        3  _raw_spin_lock_irqsave_[k]
    30035995    0.01%        3  HeapRegion::fill_with_dummy_object(HeapWordImpl**, unsigned long, bool)
    30033863    0.01%        3  ReentrantLock.unlock
    20398374    0.00%        2  JavaFrameAnchor::make_walkable()
    20345137    0.00%        2  AbstractQueuedSynchronizer$Node.setStatusRelaxed
    20289449    0.00%        2  [vdso]
    20177236    0.00%        2  LeakProfiler::is_running()
    20156180    0.00%        2  OptoRuntime::new_instance_C(Klass*, JavaThread*)
    20148126    0.00%        2  LockSupport.unpark
    20059580    0.00%        2  exit_to_user_mode_loop_[k]
    20028628    0.00%        2  kmem_cache_free_[k]
    20027615    0.00%        2  rebalance_domains_[k]
    20025852    0.00%        2  HeapRegionManager::allocate_free_region(HeapRegionType, unsigned int)
    20025087    0.00%        2  LambdaForm$MH.0x0000000801002800.invoke
    20024599    0.00%        2  Parker::unpark()
    20024100    0.00%        2  SharedRuntime::on_slowpath_allocation_exit(JavaThread*)
    20022229    0.00%        2  AbstractQueuedSynchronizer$Node.getAndUnsetStatus
    20021925    0.00%        2  ThreadPoolExecutor$Worker.tryAcquire
    20020557    0.00%        2  LockSupport.park
    10295563    0.00%        1  GameOfLife$$Lambda$45.0x000000080102bb90.accept
    10294068    0.00%        1  oopDesc::address_field(int) const
    10186841    0.00%        1  finish_task_switch.isra.0_[k]
    10182480    0.00%        1  GameOfLife.calculateFrame
    10181158    0.00%        1  syscall
    10175715    0.00%        1  rcu_work_rcufn_[k]
    10170806    0.00%        1  __tcp_select_window_[k]
    10165407    0.00%        1  Formatter.format
    10164759    0.00%        1  run_rebalance_domains_[k]
    10160204    0.00%        1  AbstractQueuedSynchronizer.acquireInterruptibly
    10158627    0.00%        1  ThreadPoolExecutor.runWorker
    10153389    0.00%        1  pthread_mutex_trylock@plt
    10150059    0.00%        1  __tls_get_addr@plt
    10147180    0.00%        1  __clock_gettime_2
    10146399    0.00%        1  StreamEncoder.implFlushBuffer
    10143513    0.00%        1  Interpreter
    10141240    0.00%        1  NioSocketImpl.beginWrite
    10114226    0.00%        1  AbstractStringBuilder.<init>
    10034914    0.00%        1  G1Policy::predict_region_non_copy_time_ms(HeapRegion*, bool) const
    10032353    0.00%        1  AbsSeq::dsd() const
    10029723    0.00%        1  PhaseCCP::analyze()
    10024865    0.00%        1  HeapRegionClaimer::claim_region(unsigned int)
    10024581    0.00%        1  void OopOopIterateBackwardsDispatch<G1ScanEvacuatedObjClosure>::Table::oop_oop_iterate_backwards<InstanceKlass, narrowOop>(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*)
    10023651    0.00%        1  G1GCPhaseTimes::phase_name(G1GCPhaseTimes::GCParPhases)
    10022249    0.00%        1  CompiledMethod::preserve_callee_argument_oops(frame, RegisterMap const*, OopClosure*)
    10021994    0.00%        1  __execlists_schedule_out?[i915]_[k]
    10021242    0.00%        1  G1MergeHeapRootsTask::G1MergeCardSetClosure::do_heap_region(HeapRegion*)
    10020728    0.00%        1  HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const
    10020330    0.00%        1  __run_timers.part.0_[k]
    10019763    0.00%        1  percpu_ref_switch_to_atomic_rcu_[k]
    10019344    0.00%        1  MutatorAllocRegion::retire(bool)
    10018679    0.00%        1  G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*)
