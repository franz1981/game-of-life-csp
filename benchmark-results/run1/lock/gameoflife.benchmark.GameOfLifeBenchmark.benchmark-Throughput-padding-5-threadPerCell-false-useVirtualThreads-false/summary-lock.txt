--- Execution profile ---
Total samples       : 12630

--- 7812876 ns (52.14%), 11351 samples
  [ 0] ReentrantLock$NonfairSync
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer.acquire
  [ 4] AbstractQueuedSynchronizer.acquire
  [ 5] ReentrantLock$Sync.lock
  [ 6] ReentrantLock.lock
  [ 7] LinkedBlockingQueue.signalNotEmpty
  [ 8] LinkedBlockingQueue.put
  [ 9] Channel.put
  [10] Cell.calculateNextState
  [11] CellsGroup$$Lambda$55.0x00000008010854d0.accept
  [12] Iterable.forEach
  [13] CellsGroup.run
  [14] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run

--- 3509219 ns (23.42%), 6 samples
  [ 0] ReentrantLock$NonfairSync
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer.acquire
  [ 4] AbstractQueuedSynchronizer.acquireInterruptibly
  [ 5] ReentrantLock$Sync.lockInterruptibly
  [ 6] ReentrantLock.lockInterruptibly
  [ 7] LinkedBlockingQueue.take
  [ 8] Channel.take
  [ 9] Cell$$Lambda$57.0x0000000801085908.apply
  [10] ReferencePipeline$3$1.accept
  [11] ArrayList$ArrayListSpliterator.forEachRemaining
  [12] AbstractPipeline.copyInto
  [13] AbstractPipeline.wrapAndCopyInto
  [14] ReduceOps$ReduceOp.evaluateSequential
  [15] AbstractPipeline.evaluate
  [16] IntPipeline.reduce
  [17] IntPipeline.sum
  [18] Cell.calculateNextState
  [19] CellsGroup$$Lambda$55.0x00000008010854d0.accept
  [20] Iterable.forEach
  [21] CellsGroup.run
  [22] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [23] ThreadPoolExecutor.runWorker
  [24] ThreadPoolExecutor$Worker.run
  [25] Thread.run

--- 1426602 ns (9.52%), 9 samples
  [ 0] ReentrantLock$NonfairSync
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer.acquire
  [ 4] AbstractQueuedSynchronizer.acquireInterruptibly
  [ 5] ReentrantLock$Sync.lockInterruptibly
  [ 6] ReentrantLock.lockInterruptibly
  [ 7] LinkedBlockingQueue.take
  [ 8] Channel.take
  [ 9] Cell.notifyLiveness
  [10] CellsGroup$$Lambda$48.0x0000000801084430.accept
  [11] Iterable.forEach
  [12] CellsGroup.run
  [13] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [14] ThreadPoolExecutor.runWorker
  [15] ThreadPoolExecutor$Worker.run
  [16] Thread.run

--- 1296274 ns (8.65%), 43 samples
  [ 0] ReentrantLock$NonfairSync
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer.acquire
  [ 4] AbstractQueuedSynchronizer.acquireInterruptibly
  [ 5] ReentrantLock$Sync.lockInterruptibly
  [ 6] ReentrantLock.lockInterruptibly
  [ 7] LinkedBlockingQueue.take
  [ 8] Channel.take
  [ 9] GameOfLife.lambda$calculateFrame$6
  [10] GameOfLife$$Lambda$56.0x00000008010856e8.accept
  [11] Dimensions.forEachRowCol
  [12] GameOfLife.calculateFrame
  [13] GameOfLife.lambda$calculateFrameBlocking$7
  [14] GameOfLife$$Lambda$52.0x0000000801084c90.run
  [15] ThreadPoolExecutor.runWorker
  [16] ThreadPoolExecutor$Worker.run
  [17] Thread.run

--- 559013 ns (3.73%), 9 samples
  [ 0] ReentrantLock$NonfairSync
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer.acquire
  [ 4] AbstractQueuedSynchronizer.acquire
  [ 5] ReentrantLock$Sync.lock
  [ 6] ReentrantLock.lock
  [ 7] LinkedBlockingQueue.signalNotEmpty
  [ 8] LinkedBlockingQueue.put
  [ 9] Channel.put
  [10] Cell.lambda$notifyLiveness$0
  [11] Cell$$Lambda$54.0x00000008010852b0.accept
  [12] ArrayList.forEach
  [13] Cell.notifyLiveness
  [14] CellsGroup$$Lambda$48.0x0000000801084430.accept
  [15] Iterable.forEach
  [16] CellsGroup.run
  [17] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [18] ThreadPoolExecutor.runWorker
  [19] ThreadPoolExecutor$Worker.run
  [20] Thread.run

--- 362105 ns (2.42%), 1194 samples
  [ 0] ReentrantLock$NonfairSync
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer.acquire
  [ 4] AbstractQueuedSynchronizer$ConditionObject.await
  [ 5] LinkedBlockingQueue.take
  [ 6] Channel.take
  [ 7] GameOfLife.lambda$calculateFrame$6
  [ 8] GameOfLife$$Lambda$56.0x00000008010856e8.accept
  [ 9] Dimensions.forEachRowCol
  [10] GameOfLife.calculateFrame
  [11] GameOfLife.lambda$calculateFrameBlocking$7
  [12] GameOfLife$$Lambda$52.0x0000000801084c90.run
  [13] ThreadPoolExecutor.runWorker
  [14] ThreadPoolExecutor$Worker.run
  [15] Thread.run

--- 12805 ns (0.09%), 1 sample
  [ 0] ReentrantLock$NonfairSync
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer.acquire
  [ 4] AbstractQueuedSynchronizer.acquire
  [ 5] ReentrantLock$Sync.lock
  [ 6] ReentrantLock.lock
  [ 7] LinkedBlockingQueue.signalNotEmpty
  [ 8] LinkedBlockingQueue.offer
  [ 9] ThreadPoolExecutor.execute
  [10] GameOfLife$$Lambda$45.0x000000080102bb90.accept
  [11] GameOfLife.calculateFrameBlocking
  [12] GameOfLifeBenchmark.benchmark
  [13] GameOfLifeBenchmark_benchmark_jmhTest.benchmark_thrpt_jmhStub
  [14] GameOfLifeBenchmark_benchmark_jmhTest.benchmark_Throughput
  [15] DirectMethodHandle$Holder.invokeSpecial
  [16] LambdaForm$MH.0x000000080102e000.invoke
  [17] LambdaForm$MH.0x000000080102e400.invokeExact_MT
  [18] DirectMethodHandleAccessor.invokeImpl
  [19] DirectMethodHandleAccessor.invoke
  [20] Method.invoke
  [21] BenchmarkHandler$BenchmarkTask.call
  [22] BenchmarkHandler$BenchmarkTask.call
  [23] FutureTask.run
  [24] Executors$RunnableAdapter.call
  [25] FutureTask.run
  [26] ThreadPoolExecutor.runWorker
  [27] ThreadPoolExecutor$Worker.run
  [28] Thread.run

--- 4988 ns (0.03%), 17 samples
  [ 0] ReentrantLock$NonfairSync
  [ 1] Unsafe.park
  [ 2] LockSupport.park
  [ 3] AbstractQueuedSynchronizer.acquire
  [ 4] AbstractQueuedSynchronizer$ConditionObject.await
  [ 5] LinkedBlockingQueue.take
  [ 6] Channel.take
  [ 7] Cell$$Lambda$57.0x0000000801085908.apply
  [ 8] ReferencePipeline$3$1.accept
  [ 9] ArrayList$ArrayListSpliterator.forEachRemaining
  [10] AbstractPipeline.copyInto
  [11] AbstractPipeline.wrapAndCopyInto
  [12] ReduceOps$ReduceOp.evaluateSequential
  [13] AbstractPipeline.evaluate
  [14] IntPipeline.reduce
  [15] IntPipeline.sum
  [16] Cell.calculateNextState
  [17] CellsGroup$$Lambda$55.0x00000008010854d0.accept
  [18] Iterable.forEach
  [19] CellsGroup.run
  [20] ThreadPerCoreGameOfLife$$Lambda$47.0x0000000801084220.run
  [21] ThreadPoolExecutor.runWorker
  [22] ThreadPoolExecutor$Worker.run
  [23] Thread.run

          ns  percent  samples  top
  ----------  -------  -------  ---
    14983882  100.00%    12630  ReentrantLock$NonfairSync
